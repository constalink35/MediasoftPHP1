<?php

function countWords($content){
    //чистим текст от знаков препинания, двойных пробелов, переводим в нижний регистр
    $content =preg_replace('#([:;!?,./"])+|(-\s+)#',' ',$content);
    $content =mb_strtolower(trim(preg_replace('/\s\s+/',' ',$content)));

    if (empty($content)) return $arr_words=[];

    $arr_words = array_count_values(explode(' ',$content));
    //если не использовать функцию array_count_values, то можно так:
    /* $arr_content = explode(' ',$content);
     $arr_words = [];
     foreach ($arr_content as $value){
        if (isset($arr_words[$value])) {
             $arr_words[$value]+=1;
        }else{
            $arr_words[$value]=1;
        }
     }
    */
    //сортируем по убыванию количества повторов
    arsort($arr_words);
    return $arr_words;

}




print <<<HEADER
<!DOCTYPE  html>
<html lang="ru">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Академия разработки MediaSoft курс PHP</title>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
<link rel="icon" href="favicon.ico" type="image/x-icon"/>
</head>
<body>
<div class="container">
    <h3>Задание 1. Циклы и функции.</h3>
    <p>Необходимо проанализировать текст:</p>
    <ul>
        <li>подсчитать общее количество слов</li>
        <li>подсчитать сколько раз слово используется в тексте</li>
        <li>вывести в консоль общую статистику :</li>
    </ul>
HEADER;

$content = '    Базы данных DBM, рассматриваемые в Рецепте 10.1, представляют собой 
простые, мощные и эффективные неструктурированные файлы, однако структура
данных таких баз ограничивается парами "ключ/значение". Если данные можно
организовать в виде ассоциаций "ключ/значение", базы данных DBM отлично
справятся с этой задачей. Однако возможности PHP в полной мере раскрываются в 
сочетании с базами данных SQL. Эта комбинация используется в большинстве рецептов 
этой главы. Работа с базами данных SQL бывает нетривиальной, но они отличаются 
исключительной мощью. Чтобы использовать PHP с конкретной базой данных SQL,
необходимо явно приказать PHP включить поддержку этой базы данных при
компиляции. Если PHP строится с поддержкой динамической загрузки модулей,
поддержка базы данных также может быть построена в виде динамического модуля.
В примерах этой главы используется уровень работы с базами данных PDO для
PHP 5. При работе с PDO разработчик использует одни и те же функции PHP
независимо от того, с каким ядром базы данных он взаимодействует. И хотя
синтаксис SQL может зависеть от базы данных, код PHP остается неизменным.
В этом отношении PDO обеспечивает абстракцию доступа к данным, а не общую абстракцию 
азы данных. Существуют и другие библиотеки, которые пытаются
решить задачу общей абстракции базы данных,  они скрывают от разработчика
такие подробности реализации, как работа с датами и типы столбцов, за программной 
прослойкой. Подобные абстракции могут сэкономить время, если вы
пишете программу, которая должна использоваться с множеством разных баз
данных, но они могут вызвать другие проблемы. При написании кода SQL, 
ориентированного на конкретный тип базы данных, вы можете использовать особенности 
этой базы данных для достижения максимального быстродействия.';

//Выводим текст
print '<h5>Текст для анализа:</h5>';
print '<p>'.$content.'</p>';
//Вызываем функцию подсчета слов
$arr_count = countWords($content );

print '<table class="table table-striped table-sm"><thead class="thead-dark">
        <tr> <th>Слово</th> <th>Количество вхождений</th> </tr></thead>';

foreach ($arr_count as $key => $value){
    print "<tr><td>$key</td><td>$value</td></tr>";
}
$sum_words = array_sum($arr_count);
print "<tr><td><b>Всего слов в тексте:<b></b></td><td><b>{$sum_words}<b></b></td></tr>";

print '</table>';



print <<<FOOTER
</div>
</body>
</html>
FOOTER;
?>